The number sequence described below is called a "hailstone number sequence". The purpose of this program is to take a number chosen by user input, follow the correct steps, and calculate-and-print the list of numbers generated by the pattern.

The pattern in question goes as follows:
Number chosen is X
If X is even, X / 2. The resulting number is now X.
If X is odd, (X * 3) + 1. The resulting number is now X. 

The step that applies is now done with the new X resulting from the previous step. 

At some point, this sequence will start an infinite loop of the numbers 4-2-1 (hence the other name for the hailstone sequence being the 4-2-1 sequence).

The above procedure is expanded on below, in regards to the program and how it is done.

In theory, this program takes an integer (eventually selected by user input).
Then, the integer is divided by two to test for a remainder.

If there is a remainder of 0, then the original number is again divided by two.
That 1/2 of the original number is saved over the original variable.

If there was a remainder of 1, then the original number is multiplied by three.
The now 3-times-larger number is saved over the original variable.
That variable then has a one added to it, and is saved again. the 

The new variable is now either [(X*3) +1] or [X/2] the original. 
The program then repeats the same steps: 
It tests for a remainder and behaves accordingly.

If the program runs correctly, any number should eventually, when entered,
End in a repeating loop of 4-2-1 (loop is cut off at 4 currently).

The goal of the program is to find how many iterations
Of the odd_x() [(X*3) +1] or even_x() [X/2] functions are necessary
To reach the 4-2-1 loop.

Note: When the even_x() and odd_x() functions run without errors,
A running count will be added with a new variable (current_count)
'current_count' will have one added to it
Each time the odd_x() and even_x() functions run. 
At the end of the program, there will be a line saying
print("It took ", current_count, " steps to reach 1.")